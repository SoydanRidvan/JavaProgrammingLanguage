		1. Primitives: int, double, char, boolean
		2. Primitive Type Castings: Implicit vs Explicit
		3. Wrapper class
		4. String
		5. String vs StringBuilder vs StringBuffer
		6. Loops: for & while
		7. Array
		8. for each loop
		9. Custom Methods
		10. Method Overloading
		11. Constructor
		12. Class & Objects
		13. Static vs Instance
		14. Import Statements
		15. Access Modifiers
		16. OOP Encapsulations


Variable:
	DataType var


1. Primitive DataTypes:
	byte, short, int, long, float, double
	char, boolean


Non-Primitive DataTypes: String, Wrapper classes, classes, interfaces .....


2. primitive type casting:

		implicit: smaller primitive type to larger primitive type

		explicit: larger primitive type to smaller primitive type


3. Wrapper classes: used for converting primitives to objects



4. Char Sequences (Is a Class in Java): Combination of chars
        String, String Builder and String Buffer classes are the child class of Char Sequences

		String (Is a Class): immutable (unchangable) version of char sequences
                When you create object of string in Heap memory, it stays unchangable in Heap memory until it is collected by Garbage Collector

				a = "Cydeo" => " " String literals
				b = new String("Cydeo") => New means new Object in memory

				String methods: equals, equalsIgnoreCase, substring, lower/upperCase, charAt, split, toCharArray, replace, indexOf....


		StringBuilder: mutable version of char sequences

		StringBuffer: mutable version of char sequences, synchronized. slow
                      Synchronized means Thread Safe, Whenever multiple threads are created, they are executed concretely
                      Just one thread will be executed in one time, the others will be locked


    *** Object class is the parent class of all classes so all of the methods of Object class can be used by other classes
        Object class provides common methods for all classes
        finalize method is also common method besides equal method

6. Loops: for & while. repeated actions

		for: if the number of repetition is known (fixed)

				for(init; Condition; ++/--){
						code fragments that NEED to be repeated
				}

		while: if the number of repetition is unknown (not fixed)

				while(Condition){
					code fragments that NEED to be repeated
				}


		break: terminates/exits the loop/switch => Branching statements

		continue: skips the current iteration => Branching statements

		return: exits the method => Branching statements

                return exists one method
                System.exit terminates all (everything), this method is used rarely


7. Array: Data Structure => DS is is just like variable, like container, in regular variable you can store just one data,
                            in Data Structure variables you can store multiple datas in organized manner...
		  Size is fixed.
		  Faster
		  Multi-dimensional
		  Supports primitives & non primitives
		  Has index numbers


8. for each loop: ONLY used for the data structures
				  No index
				  iteration order is fixed
				  number of iteration is fixed



9. Custom Methods: function that can perform a task
				  grouping a series of code fragments
				  improves reusability
				  less codes
				  maintainability
				  readable

    Use case of methods; Driver class, Utility classes, assertions, connections in JDBC

				  Access Modifier static  ReturnType methodName(parameter){
				  	codes that can perform the desired task
				  }

            2 types of methods in Java;
                - System library methods (Comes from jre)
                - User define methods

             *** Static keyword in method => Means method belongs to the class, class member not object member,
                                             not need objects, objects can use also
                                          => You can call with the class name
                                          => If you dont use static keyword means it is a instance method

            Access Modifier => Public, Protected (Reachable in same package, must be sub class to be able to reach outside the package),
                               Default (reachable in the same package) , Private

            Return Types => Void and Return
                            Void => If the method is not returning a value, just performing the task
                            Return => If method is returning value, you can use this value outside the method by calling method


10. Method overloading: multiple methods having the same name in same class

						Parameters MUST be different



11. Constructor: used for creating objects
				 every class have a constructor
				 gets executed when the object is created
				 can be used for initializing the instances


			 In my framework:

			 	BasePage:

			 		public BasePage(){
			 			PageFactory.initElements(Driver.getDriver, this);
			 		}


			 	HomePage extends BasePage
			 	SecondPage extends BasePage
			 	...

		 			@FindBy ===> driver.findElement



				 this()
				 super()


			  Driver:

			  	private Driver(){

			  	}



12. Class & Objects:

		class: A template/blueprint or a set of instructions of objects. where all objects came from. no memory allocated for classes

		object: an instance of a class. each object has its own memory


		formula is a class
		medicine is an object



13. Static vs Instance

		instance:  Multiple copies. belongs to the objects

		static:	   one copy ONLY. static belongs to the class


14. Import Statements:

		import page.class;

		import static page.class.member;


			assertTrue()
			when()... then()...


15. Access Modifiers:

		private < default < protected < public



16. OOP Encapsulations: Object hiding its data.
						Make the instance variables private
						generate public getter/setter (instance) methods

						TO HAVE COMPLETE CONTROL OF INSTANCE VARIABLES

						getter: read ONLY
								Has no parameters

						setter: Write ONLY
								Has one parameter


			My framework:
				POJO
